// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file video_frame.proto (package livekit.proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FfiOwnedHandle } from "./handle_pb.js";

/**
 * @generated from enum livekit.proto.VideoCodec
 */
export enum VideoCodec {
  /**
   * @generated from enum value: VP8 = 0;
   */
  VP8 = 0,

  /**
   * @generated from enum value: H264 = 1;
   */
  H264 = 1,

  /**
   * @generated from enum value: AV1 = 2;
   */
  AV1 = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(VideoCodec)
proto3.util.setEnumType(VideoCodec, "livekit.proto.VideoCodec", [
  { no: 0, name: "VP8" },
  { no: 1, name: "H264" },
  { no: 2, name: "AV1" },
]);

/**
 * @generated from enum livekit.proto.VideoRotation
 */
export enum VideoRotation {
  /**
   * @generated from enum value: VIDEO_ROTATION_0 = 0;
   */
  VIDEO_ROTATION_0 = 0,

  /**
   * @generated from enum value: VIDEO_ROTATION_90 = 1;
   */
  VIDEO_ROTATION_90 = 1,

  /**
   * @generated from enum value: VIDEO_ROTATION_180 = 2;
   */
  VIDEO_ROTATION_180 = 2,

  /**
   * @generated from enum value: VIDEO_ROTATION_270 = 3;
   */
  VIDEO_ROTATION_270 = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(VideoRotation)
proto3.util.setEnumType(VideoRotation, "livekit.proto.VideoRotation", [
  { no: 0, name: "VIDEO_ROTATION_0" },
  { no: 1, name: "VIDEO_ROTATION_90" },
  { no: 2, name: "VIDEO_ROTATION_180" },
  { no: 3, name: "VIDEO_ROTATION_270" },
]);

/**
 * @generated from enum livekit.proto.VideoFormatType
 */
export enum VideoFormatType {
  /**
   * @generated from enum value: FORMAT_ARGB = 0;
   */
  FORMAT_ARGB = 0,

  /**
   * @generated from enum value: FORMAT_BGRA = 1;
   */
  FORMAT_BGRA = 1,

  /**
   * @generated from enum value: FORMAT_ABGR = 2;
   */
  FORMAT_ABGR = 2,

  /**
   * @generated from enum value: FORMAT_RGBA = 3;
   */
  FORMAT_RGBA = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(VideoFormatType)
proto3.util.setEnumType(VideoFormatType, "livekit.proto.VideoFormatType", [
  { no: 0, name: "FORMAT_ARGB" },
  { no: 1, name: "FORMAT_BGRA" },
  { no: 2, name: "FORMAT_ABGR" },
  { no: 3, name: "FORMAT_RGBA" },
]);

/**
 * @generated from enum livekit.proto.VideoFrameBufferType
 */
export enum VideoFrameBufferType {
  /**
   * @generated from enum value: NATIVE = 0;
   */
  NATIVE = 0,

  /**
   * @generated from enum value: I420 = 1;
   */
  I420 = 1,

  /**
   * @generated from enum value: I420A = 2;
   */
  I420A = 2,

  /**
   * @generated from enum value: I422 = 3;
   */
  I422 = 3,

  /**
   * @generated from enum value: I444 = 4;
   */
  I444 = 4,

  /**
   * @generated from enum value: I010 = 5;
   */
  I010 = 5,

  /**
   * @generated from enum value: NV12 = 6;
   */
  NV12 = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(VideoFrameBufferType)
proto3.util.setEnumType(VideoFrameBufferType, "livekit.proto.VideoFrameBufferType", [
  { no: 0, name: "NATIVE" },
  { no: 1, name: "I420" },
  { no: 2, name: "I420A" },
  { no: 3, name: "I422" },
  { no: 4, name: "I444" },
  { no: 5, name: "I010" },
  { no: 6, name: "NV12" },
]);

/**
 * @generated from enum livekit.proto.VideoStreamType
 */
export enum VideoStreamType {
  /**
   * @generated from enum value: VIDEO_STREAM_NATIVE = 0;
   */
  VIDEO_STREAM_NATIVE = 0,

  /**
   * @generated from enum value: VIDEO_STREAM_WEBGL = 1;
   */
  VIDEO_STREAM_WEBGL = 1,

  /**
   * @generated from enum value: VIDEO_STREAM_HTML = 2;
   */
  VIDEO_STREAM_HTML = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(VideoStreamType)
proto3.util.setEnumType(VideoStreamType, "livekit.proto.VideoStreamType", [
  { no: 0, name: "VIDEO_STREAM_NATIVE" },
  { no: 1, name: "VIDEO_STREAM_WEBGL" },
  { no: 2, name: "VIDEO_STREAM_HTML" },
]);

/**
 * @generated from enum livekit.proto.VideoSourceType
 */
export enum VideoSourceType {
  /**
   * @generated from enum value: VIDEO_SOURCE_NATIVE = 0;
   */
  VIDEO_SOURCE_NATIVE = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(VideoSourceType)
proto3.util.setEnumType(VideoSourceType, "livekit.proto.VideoSourceType", [
  { no: 0, name: "VIDEO_SOURCE_NATIVE" },
]);

/**
 * Allocate a new VideoFrameBuffer
 *
 * @generated from message livekit.proto.AllocVideoBufferRequest
 */
export class AllocVideoBufferRequest extends Message<AllocVideoBufferRequest> {
  /**
   * Only I420 is supported atm
   *
   * @generated from field: livekit.proto.VideoFrameBufferType type = 1;
   */
  type = VideoFrameBufferType.NATIVE;

  /**
   * @generated from field: uint32 width = 2;
   */
  width = 0;

  /**
   * @generated from field: uint32 height = 3;
   */
  height = 0;

  constructor(data?: PartialMessage<AllocVideoBufferRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.AllocVideoBufferRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(VideoFrameBufferType) },
    { no: 2, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllocVideoBufferRequest {
    return new AllocVideoBufferRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllocVideoBufferRequest {
    return new AllocVideoBufferRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllocVideoBufferRequest {
    return new AllocVideoBufferRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AllocVideoBufferRequest | PlainMessage<AllocVideoBufferRequest> | undefined, b: AllocVideoBufferRequest | PlainMessage<AllocVideoBufferRequest> | undefined): boolean {
    return proto3.util.equals(AllocVideoBufferRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.AllocVideoBufferResponse
 */
export class AllocVideoBufferResponse extends Message<AllocVideoBufferResponse> {
  /**
   * @generated from field: livekit.proto.OwnedVideoFrameBuffer buffer = 1;
   */
  buffer?: OwnedVideoFrameBuffer;

  constructor(data?: PartialMessage<AllocVideoBufferResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.AllocVideoBufferResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "buffer", kind: "message", T: OwnedVideoFrameBuffer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllocVideoBufferResponse {
    return new AllocVideoBufferResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllocVideoBufferResponse {
    return new AllocVideoBufferResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllocVideoBufferResponse {
    return new AllocVideoBufferResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AllocVideoBufferResponse | PlainMessage<AllocVideoBufferResponse> | undefined, b: AllocVideoBufferResponse | PlainMessage<AllocVideoBufferResponse> | undefined): boolean {
    return proto3.util.equals(AllocVideoBufferResponse, a, b);
  }
}

/**
 * Create a new VideoStream
 * VideoStream is used to receive video frames from a track
 *
 * @generated from message livekit.proto.NewVideoStreamRequest
 */
export class NewVideoStreamRequest extends Message<NewVideoStreamRequest> {
  /**
   * @generated from field: uint64 track_handle = 1;
   */
  trackHandle = protoInt64.zero;

  /**
   * @generated from field: livekit.proto.VideoStreamType type = 2;
   */
  type = VideoStreamType.VIDEO_STREAM_NATIVE;

  constructor(data?: PartialMessage<NewVideoStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.NewVideoStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "track_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(VideoStreamType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewVideoStreamRequest {
    return new NewVideoStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewVideoStreamRequest {
    return new NewVideoStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewVideoStreamRequest {
    return new NewVideoStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewVideoStreamRequest | PlainMessage<NewVideoStreamRequest> | undefined, b: NewVideoStreamRequest | PlainMessage<NewVideoStreamRequest> | undefined): boolean {
    return proto3.util.equals(NewVideoStreamRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.NewVideoStreamResponse
 */
export class NewVideoStreamResponse extends Message<NewVideoStreamResponse> {
  /**
   * @generated from field: livekit.proto.OwnedVideoStream stream = 1;
   */
  stream?: OwnedVideoStream;

  constructor(data?: PartialMessage<NewVideoStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.NewVideoStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream", kind: "message", T: OwnedVideoStream },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewVideoStreamResponse {
    return new NewVideoStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewVideoStreamResponse {
    return new NewVideoStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewVideoStreamResponse {
    return new NewVideoStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewVideoStreamResponse | PlainMessage<NewVideoStreamResponse> | undefined, b: NewVideoStreamResponse | PlainMessage<NewVideoStreamResponse> | undefined): boolean {
    return proto3.util.equals(NewVideoStreamResponse, a, b);
  }
}

/**
 * Create a new VideoSource
 * VideoSource is used to send video frame to a track
 *
 * @generated from message livekit.proto.NewVideoSourceRequest
 */
export class NewVideoSourceRequest extends Message<NewVideoSourceRequest> {
  /**
   * @generated from field: livekit.proto.VideoSourceType type = 1;
   */
  type = VideoSourceType.VIDEO_SOURCE_NATIVE;

  /**
   * Used to determine which encodings to use + simulcast layers
   * Most of the time it corresponds to the source resolution 
   *
   * @generated from field: livekit.proto.VideoSourceResolution resolution = 2;
   */
  resolution?: VideoSourceResolution;

  constructor(data?: PartialMessage<NewVideoSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.NewVideoSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(VideoSourceType) },
    { no: 2, name: "resolution", kind: "message", T: VideoSourceResolution },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewVideoSourceRequest {
    return new NewVideoSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewVideoSourceRequest {
    return new NewVideoSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewVideoSourceRequest {
    return new NewVideoSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewVideoSourceRequest | PlainMessage<NewVideoSourceRequest> | undefined, b: NewVideoSourceRequest | PlainMessage<NewVideoSourceRequest> | undefined): boolean {
    return proto3.util.equals(NewVideoSourceRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.NewVideoSourceResponse
 */
export class NewVideoSourceResponse extends Message<NewVideoSourceResponse> {
  /**
   * @generated from field: livekit.proto.OwnedVideoSource source = 1;
   */
  source?: OwnedVideoSource;

  constructor(data?: PartialMessage<NewVideoSourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.NewVideoSourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source", kind: "message", T: OwnedVideoSource },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewVideoSourceResponse {
    return new NewVideoSourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewVideoSourceResponse {
    return new NewVideoSourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewVideoSourceResponse {
    return new NewVideoSourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewVideoSourceResponse | PlainMessage<NewVideoSourceResponse> | undefined, b: NewVideoSourceResponse | PlainMessage<NewVideoSourceResponse> | undefined): boolean {
    return proto3.util.equals(NewVideoSourceResponse, a, b);
  }
}

/**
 * Push a frame to a VideoSource
 *
 * @generated from message livekit.proto.CaptureVideoFrameRequest
 */
export class CaptureVideoFrameRequest extends Message<CaptureVideoFrameRequest> {
  /**
   * @generated from field: uint64 source_handle = 1;
   */
  sourceHandle = protoInt64.zero;

  /**
   * @generated from field: livekit.proto.VideoFrameInfo frame = 2;
   */
  frame?: VideoFrameInfo;

  /**
   * @generated from oneof livekit.proto.CaptureVideoFrameRequest.from
   */
  from: {
    /**
     * @generated from field: livekit.proto.VideoFrameBufferInfo info = 3;
     */
    value: VideoFrameBufferInfo;
    case: "info";
  } | {
    /**
     * @generated from field: uint64 handle = 4;
     */
    value: bigint;
    case: "handle";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CaptureVideoFrameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.CaptureVideoFrameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "frame", kind: "message", T: VideoFrameInfo },
    { no: 3, name: "info", kind: "message", T: VideoFrameBufferInfo, oneof: "from" },
    { no: 4, name: "handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "from" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CaptureVideoFrameRequest {
    return new CaptureVideoFrameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CaptureVideoFrameRequest {
    return new CaptureVideoFrameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CaptureVideoFrameRequest {
    return new CaptureVideoFrameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CaptureVideoFrameRequest | PlainMessage<CaptureVideoFrameRequest> | undefined, b: CaptureVideoFrameRequest | PlainMessage<CaptureVideoFrameRequest> | undefined): boolean {
    return proto3.util.equals(CaptureVideoFrameRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.CaptureVideoFrameResponse
 */
export class CaptureVideoFrameResponse extends Message<CaptureVideoFrameResponse> {
  constructor(data?: PartialMessage<CaptureVideoFrameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.CaptureVideoFrameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CaptureVideoFrameResponse {
    return new CaptureVideoFrameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CaptureVideoFrameResponse {
    return new CaptureVideoFrameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CaptureVideoFrameResponse {
    return new CaptureVideoFrameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CaptureVideoFrameResponse | PlainMessage<CaptureVideoFrameResponse> | undefined, b: CaptureVideoFrameResponse | PlainMessage<CaptureVideoFrameResponse> | undefined): boolean {
    return proto3.util.equals(CaptureVideoFrameResponse, a, b);
  }
}

/**
 * Convert a RGBA frame to a I420 YUV frame
 * Or convert another YUV frame format to I420
 *
 * @generated from message livekit.proto.ToI420Request
 */
export class ToI420Request extends Message<ToI420Request> {
  /**
   * @generated from field: bool flip_y = 1;
   */
  flipY = false;

  /**
   * @generated from oneof livekit.proto.ToI420Request.from
   */
  from: {
    /**
     * @generated from field: livekit.proto.ArgbBufferInfo argb = 2;
     */
    value: ArgbBufferInfo;
    case: "argb";
  } | {
    /**
     * @generated from field: livekit.proto.VideoFrameBufferInfo buffer = 3;
     */
    value: VideoFrameBufferInfo;
    case: "buffer";
  } | {
    /**
     * @generated from field: uint64 handle = 4;
     */
    value: bigint;
    case: "handle";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ToI420Request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ToI420Request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flip_y", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "argb", kind: "message", T: ArgbBufferInfo, oneof: "from" },
    { no: 3, name: "buffer", kind: "message", T: VideoFrameBufferInfo, oneof: "from" },
    { no: 4, name: "handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "from" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToI420Request {
    return new ToI420Request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToI420Request {
    return new ToI420Request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToI420Request {
    return new ToI420Request().fromJsonString(jsonString, options);
  }

  static equals(a: ToI420Request | PlainMessage<ToI420Request> | undefined, b: ToI420Request | PlainMessage<ToI420Request> | undefined): boolean {
    return proto3.util.equals(ToI420Request, a, b);
  }
}

/**
 * @generated from message livekit.proto.ToI420Response
 */
export class ToI420Response extends Message<ToI420Response> {
  /**
   * @generated from field: livekit.proto.OwnedVideoFrameBuffer buffer = 1;
   */
  buffer?: OwnedVideoFrameBuffer;

  constructor(data?: PartialMessage<ToI420Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ToI420Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "buffer", kind: "message", T: OwnedVideoFrameBuffer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToI420Response {
    return new ToI420Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToI420Response {
    return new ToI420Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToI420Response {
    return new ToI420Response().fromJsonString(jsonString, options);
  }

  static equals(a: ToI420Response | PlainMessage<ToI420Response> | undefined, b: ToI420Response | PlainMessage<ToI420Response> | undefined): boolean {
    return proto3.util.equals(ToI420Response, a, b);
  }
}

/**
 * Convert a YUV frame to a RGBA frame
 * Only I420 is supported atm
 *
 * @generated from message livekit.proto.ToArgbRequest
 */
export class ToArgbRequest extends Message<ToArgbRequest> {
  /**
   * @generated from field: livekit.proto.VideoFrameBufferInfo buffer = 1;
   */
  buffer?: VideoFrameBufferInfo;

  /**
   * @generated from field: uint64 dst_ptr = 2;
   */
  dstPtr = protoInt64.zero;

  /**
   * @generated from field: livekit.proto.VideoFormatType dst_format = 3;
   */
  dstFormat = VideoFormatType.FORMAT_ARGB;

  /**
   * @generated from field: uint32 dst_stride = 4;
   */
  dstStride = 0;

  /**
   * @generated from field: uint32 dst_width = 5;
   */
  dstWidth = 0;

  /**
   * @generated from field: uint32 dst_height = 6;
   */
  dstHeight = 0;

  /**
   * @generated from field: bool flip_y = 7;
   */
  flipY = false;

  constructor(data?: PartialMessage<ToArgbRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ToArgbRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "buffer", kind: "message", T: VideoFrameBufferInfo },
    { no: 2, name: "dst_ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "dst_format", kind: "enum", T: proto3.getEnumType(VideoFormatType) },
    { no: 4, name: "dst_stride", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "dst_width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "dst_height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "flip_y", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToArgbRequest {
    return new ToArgbRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToArgbRequest {
    return new ToArgbRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToArgbRequest {
    return new ToArgbRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ToArgbRequest | PlainMessage<ToArgbRequest> | undefined, b: ToArgbRequest | PlainMessage<ToArgbRequest> | undefined): boolean {
    return proto3.util.equals(ToArgbRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.ToArgbResponse
 */
export class ToArgbResponse extends Message<ToArgbResponse> {
  constructor(data?: PartialMessage<ToArgbResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ToArgbResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToArgbResponse {
    return new ToArgbResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToArgbResponse {
    return new ToArgbResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToArgbResponse {
    return new ToArgbResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ToArgbResponse | PlainMessage<ToArgbResponse> | undefined, b: ToArgbResponse | PlainMessage<ToArgbResponse> | undefined): boolean {
    return proto3.util.equals(ToArgbResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoResolution
 */
export class VideoResolution extends Message<VideoResolution> {
  /**
   * @generated from field: uint32 width = 1;
   */
  width = 0;

  /**
   * @generated from field: uint32 height = 2;
   */
  height = 0;

  /**
   * @generated from field: double frame_rate = 3;
   */
  frameRate = 0;

  constructor(data?: PartialMessage<VideoResolution>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.VideoResolution";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "frame_rate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoResolution {
    return new VideoResolution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoResolution {
    return new VideoResolution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoResolution {
    return new VideoResolution().fromJsonString(jsonString, options);
  }

  static equals(a: VideoResolution | PlainMessage<VideoResolution> | undefined, b: VideoResolution | PlainMessage<VideoResolution> | undefined): boolean {
    return proto3.util.equals(VideoResolution, a, b);
  }
}

/**
 * @generated from message livekit.proto.ArgbBufferInfo
 */
export class ArgbBufferInfo extends Message<ArgbBufferInfo> {
  /**
   * @generated from field: uint64 ptr = 1;
   */
  ptr = protoInt64.zero;

  /**
   * @generated from field: livekit.proto.VideoFormatType format = 2;
   */
  format = VideoFormatType.FORMAT_ARGB;

  /**
   * @generated from field: uint32 stride = 3;
   */
  stride = 0;

  /**
   * @generated from field: uint32 width = 4;
   */
  width = 0;

  /**
   * @generated from field: uint32 height = 5;
   */
  height = 0;

  constructor(data?: PartialMessage<ArgbBufferInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ArgbBufferInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "format", kind: "enum", T: proto3.getEnumType(VideoFormatType) },
    { no: 3, name: "stride", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArgbBufferInfo {
    return new ArgbBufferInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArgbBufferInfo {
    return new ArgbBufferInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArgbBufferInfo {
    return new ArgbBufferInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ArgbBufferInfo | PlainMessage<ArgbBufferInfo> | undefined, b: ArgbBufferInfo | PlainMessage<ArgbBufferInfo> | undefined): boolean {
    return proto3.util.equals(ArgbBufferInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoFrameInfo
 */
export class VideoFrameInfo extends Message<VideoFrameInfo> {
  /**
   * In microseconds
   *
   * @generated from field: int64 timestamp_us = 1;
   */
  timestampUs = protoInt64.zero;

  /**
   * @generated from field: livekit.proto.VideoRotation rotation = 2;
   */
  rotation = VideoRotation.VIDEO_ROTATION_0;

  constructor(data?: PartialMessage<VideoFrameInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.VideoFrameInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp_us", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "rotation", kind: "enum", T: proto3.getEnumType(VideoRotation) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoFrameInfo {
    return new VideoFrameInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoFrameInfo {
    return new VideoFrameInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoFrameInfo {
    return new VideoFrameInfo().fromJsonString(jsonString, options);
  }

  static equals(a: VideoFrameInfo | PlainMessage<VideoFrameInfo> | undefined, b: VideoFrameInfo | PlainMessage<VideoFrameInfo> | undefined): boolean {
    return proto3.util.equals(VideoFrameInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoFrameBufferInfo
 */
export class VideoFrameBufferInfo extends Message<VideoFrameBufferInfo> {
  /**
   * @generated from field: livekit.proto.VideoFrameBufferType buffer_type = 1;
   */
  bufferType = VideoFrameBufferType.NATIVE;

  /**
   * @generated from field: uint32 width = 2;
   */
  width = 0;

  /**
   * @generated from field: uint32 height = 3;
   */
  height = 0;

  /**
   * @generated from oneof livekit.proto.VideoFrameBufferInfo.buffer
   */
  buffer: {
    /**
     * @generated from field: livekit.proto.PlanarYuvBufferInfo yuv = 4;
     */
    value: PlanarYuvBufferInfo;
    case: "yuv";
  } | {
    /**
     * @generated from field: livekit.proto.BiplanarYuvBufferInfo bi_yuv = 5;
     */
    value: BiplanarYuvBufferInfo;
    case: "biYuv";
  } | {
    /**
     * @generated from field: livekit.proto.NativeBufferInfo native = 6;
     */
    value: NativeBufferInfo;
    case: "native";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<VideoFrameBufferInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.VideoFrameBufferInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "buffer_type", kind: "enum", T: proto3.getEnumType(VideoFrameBufferType) },
    { no: 2, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "yuv", kind: "message", T: PlanarYuvBufferInfo, oneof: "buffer" },
    { no: 5, name: "bi_yuv", kind: "message", T: BiplanarYuvBufferInfo, oneof: "buffer" },
    { no: 6, name: "native", kind: "message", T: NativeBufferInfo, oneof: "buffer" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoFrameBufferInfo {
    return new VideoFrameBufferInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoFrameBufferInfo {
    return new VideoFrameBufferInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoFrameBufferInfo {
    return new VideoFrameBufferInfo().fromJsonString(jsonString, options);
  }

  static equals(a: VideoFrameBufferInfo | PlainMessage<VideoFrameBufferInfo> | undefined, b: VideoFrameBufferInfo | PlainMessage<VideoFrameBufferInfo> | undefined): boolean {
    return proto3.util.equals(VideoFrameBufferInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.OwnedVideoFrameBuffer
 */
export class OwnedVideoFrameBuffer extends Message<OwnedVideoFrameBuffer> {
  /**
   * @generated from field: livekit.proto.FfiOwnedHandle handle = 1;
   */
  handle?: FfiOwnedHandle;

  /**
   * @generated from field: livekit.proto.VideoFrameBufferInfo info = 2;
   */
  info?: VideoFrameBufferInfo;

  constructor(data?: PartialMessage<OwnedVideoFrameBuffer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.OwnedVideoFrameBuffer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: VideoFrameBufferInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnedVideoFrameBuffer {
    return new OwnedVideoFrameBuffer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnedVideoFrameBuffer {
    return new OwnedVideoFrameBuffer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnedVideoFrameBuffer {
    return new OwnedVideoFrameBuffer().fromJsonString(jsonString, options);
  }

  static equals(a: OwnedVideoFrameBuffer | PlainMessage<OwnedVideoFrameBuffer> | undefined, b: OwnedVideoFrameBuffer | PlainMessage<OwnedVideoFrameBuffer> | undefined): boolean {
    return proto3.util.equals(OwnedVideoFrameBuffer, a, b);
  }
}

/**
 * @generated from message livekit.proto.PlanarYuvBufferInfo
 */
export class PlanarYuvBufferInfo extends Message<PlanarYuvBufferInfo> {
  /**
   * @generated from field: uint32 chroma_width = 1;
   */
  chromaWidth = 0;

  /**
   * @generated from field: uint32 chroma_height = 2;
   */
  chromaHeight = 0;

  /**
   * @generated from field: uint32 stride_y = 3;
   */
  strideY = 0;

  /**
   * @generated from field: uint32 stride_u = 4;
   */
  strideU = 0;

  /**
   * @generated from field: uint32 stride_v = 5;
   */
  strideV = 0;

  /**
   * @generated from field: uint32 stride_a = 6;
   */
  strideA = 0;

  /**
   * *const u8 or *const u16
   *
   * @generated from field: uint64 data_y_ptr = 7;
   */
  dataYPtr = protoInt64.zero;

  /**
   * @generated from field: uint64 data_u_ptr = 8;
   */
  dataUPtr = protoInt64.zero;

  /**
   * @generated from field: uint64 data_v_ptr = 9;
   */
  dataVPtr = protoInt64.zero;

  /**
   * nullptr = no alpha
   *
   * @generated from field: uint64 data_a_ptr = 10;
   */
  dataAPtr = protoInt64.zero;

  constructor(data?: PartialMessage<PlanarYuvBufferInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PlanarYuvBufferInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chroma_width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "chroma_height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "stride_y", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "stride_u", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "stride_v", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "stride_a", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "data_y_ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "data_u_ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "data_v_ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "data_a_ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlanarYuvBufferInfo {
    return new PlanarYuvBufferInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlanarYuvBufferInfo {
    return new PlanarYuvBufferInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlanarYuvBufferInfo {
    return new PlanarYuvBufferInfo().fromJsonString(jsonString, options);
  }

  static equals(a: PlanarYuvBufferInfo | PlainMessage<PlanarYuvBufferInfo> | undefined, b: PlanarYuvBufferInfo | PlainMessage<PlanarYuvBufferInfo> | undefined): boolean {
    return proto3.util.equals(PlanarYuvBufferInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.BiplanarYuvBufferInfo
 */
export class BiplanarYuvBufferInfo extends Message<BiplanarYuvBufferInfo> {
  /**
   * @generated from field: uint32 chroma_width = 1;
   */
  chromaWidth = 0;

  /**
   * @generated from field: uint32 chroma_height = 2;
   */
  chromaHeight = 0;

  /**
   * @generated from field: uint32 stride_y = 3;
   */
  strideY = 0;

  /**
   * @generated from field: uint32 stride_uv = 4;
   */
  strideUv = 0;

  /**
   * @generated from field: uint64 data_y_ptr = 5;
   */
  dataYPtr = protoInt64.zero;

  /**
   * @generated from field: uint64 data_uv_ptr = 6;
   */
  dataUvPtr = protoInt64.zero;

  constructor(data?: PartialMessage<BiplanarYuvBufferInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.BiplanarYuvBufferInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chroma_width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "chroma_height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "stride_y", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "stride_uv", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "data_y_ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "data_uv_ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BiplanarYuvBufferInfo {
    return new BiplanarYuvBufferInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BiplanarYuvBufferInfo {
    return new BiplanarYuvBufferInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BiplanarYuvBufferInfo {
    return new BiplanarYuvBufferInfo().fromJsonString(jsonString, options);
  }

  static equals(a: BiplanarYuvBufferInfo | PlainMessage<BiplanarYuvBufferInfo> | undefined, b: BiplanarYuvBufferInfo | PlainMessage<BiplanarYuvBufferInfo> | undefined): boolean {
    return proto3.util.equals(BiplanarYuvBufferInfo, a, b);
  }
}

/**
 * TODO(theomonnom): Expose graphic context?
 *
 * @generated from message livekit.proto.NativeBufferInfo
 */
export class NativeBufferInfo extends Message<NativeBufferInfo> {
  constructor(data?: PartialMessage<NativeBufferInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.NativeBufferInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NativeBufferInfo {
    return new NativeBufferInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NativeBufferInfo {
    return new NativeBufferInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NativeBufferInfo {
    return new NativeBufferInfo().fromJsonString(jsonString, options);
  }

  static equals(a: NativeBufferInfo | PlainMessage<NativeBufferInfo> | undefined, b: NativeBufferInfo | PlainMessage<NativeBufferInfo> | undefined): boolean {
    return proto3.util.equals(NativeBufferInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoStreamInfo
 */
export class VideoStreamInfo extends Message<VideoStreamInfo> {
  /**
   * @generated from field: livekit.proto.VideoStreamType type = 1;
   */
  type = VideoStreamType.VIDEO_STREAM_NATIVE;

  constructor(data?: PartialMessage<VideoStreamInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.VideoStreamInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(VideoStreamType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoStreamInfo {
    return new VideoStreamInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoStreamInfo {
    return new VideoStreamInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoStreamInfo {
    return new VideoStreamInfo().fromJsonString(jsonString, options);
  }

  static equals(a: VideoStreamInfo | PlainMessage<VideoStreamInfo> | undefined, b: VideoStreamInfo | PlainMessage<VideoStreamInfo> | undefined): boolean {
    return proto3.util.equals(VideoStreamInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.OwnedVideoStream
 */
export class OwnedVideoStream extends Message<OwnedVideoStream> {
  /**
   * @generated from field: livekit.proto.FfiOwnedHandle handle = 1;
   */
  handle?: FfiOwnedHandle;

  /**
   * @generated from field: livekit.proto.VideoStreamInfo info = 2;
   */
  info?: VideoStreamInfo;

  constructor(data?: PartialMessage<OwnedVideoStream>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.OwnedVideoStream";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: VideoStreamInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnedVideoStream {
    return new OwnedVideoStream().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnedVideoStream {
    return new OwnedVideoStream().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnedVideoStream {
    return new OwnedVideoStream().fromJsonString(jsonString, options);
  }

  static equals(a: OwnedVideoStream | PlainMessage<OwnedVideoStream> | undefined, b: OwnedVideoStream | PlainMessage<OwnedVideoStream> | undefined): boolean {
    return proto3.util.equals(OwnedVideoStream, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoStreamEvent
 */
export class VideoStreamEvent extends Message<VideoStreamEvent> {
  /**
   * @generated from field: uint64 stream_handle = 1;
   */
  streamHandle = protoInt64.zero;

  /**
   * @generated from oneof livekit.proto.VideoStreamEvent.message
   */
  message: {
    /**
     * @generated from field: livekit.proto.VideoFrameReceived frame_received = 2;
     */
    value: VideoFrameReceived;
    case: "frameReceived";
  } | {
    /**
     * @generated from field: livekit.proto.VideoStreamEOS eos = 3;
     */
    value: VideoStreamEOS;
    case: "eos";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<VideoStreamEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.VideoStreamEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "frame_received", kind: "message", T: VideoFrameReceived, oneof: "message" },
    { no: 3, name: "eos", kind: "message", T: VideoStreamEOS, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoStreamEvent {
    return new VideoStreamEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoStreamEvent {
    return new VideoStreamEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoStreamEvent {
    return new VideoStreamEvent().fromJsonString(jsonString, options);
  }

  static equals(a: VideoStreamEvent | PlainMessage<VideoStreamEvent> | undefined, b: VideoStreamEvent | PlainMessage<VideoStreamEvent> | undefined): boolean {
    return proto3.util.equals(VideoStreamEvent, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoFrameReceived
 */
export class VideoFrameReceived extends Message<VideoFrameReceived> {
  /**
   * @generated from field: livekit.proto.VideoFrameInfo frame = 1;
   */
  frame?: VideoFrameInfo;

  /**
   * @generated from field: livekit.proto.OwnedVideoFrameBuffer buffer = 2;
   */
  buffer?: OwnedVideoFrameBuffer;

  constructor(data?: PartialMessage<VideoFrameReceived>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.VideoFrameReceived";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "frame", kind: "message", T: VideoFrameInfo },
    { no: 2, name: "buffer", kind: "message", T: OwnedVideoFrameBuffer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoFrameReceived {
    return new VideoFrameReceived().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoFrameReceived {
    return new VideoFrameReceived().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoFrameReceived {
    return new VideoFrameReceived().fromJsonString(jsonString, options);
  }

  static equals(a: VideoFrameReceived | PlainMessage<VideoFrameReceived> | undefined, b: VideoFrameReceived | PlainMessage<VideoFrameReceived> | undefined): boolean {
    return proto3.util.equals(VideoFrameReceived, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoStreamEOS
 */
export class VideoStreamEOS extends Message<VideoStreamEOS> {
  constructor(data?: PartialMessage<VideoStreamEOS>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.VideoStreamEOS";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoStreamEOS {
    return new VideoStreamEOS().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoStreamEOS {
    return new VideoStreamEOS().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoStreamEOS {
    return new VideoStreamEOS().fromJsonString(jsonString, options);
  }

  static equals(a: VideoStreamEOS | PlainMessage<VideoStreamEOS> | undefined, b: VideoStreamEOS | PlainMessage<VideoStreamEOS> | undefined): boolean {
    return proto3.util.equals(VideoStreamEOS, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoSourceResolution
 */
export class VideoSourceResolution extends Message<VideoSourceResolution> {
  /**
   * @generated from field: uint32 width = 1;
   */
  width = 0;

  /**
   * @generated from field: uint32 height = 2;
   */
  height = 0;

  constructor(data?: PartialMessage<VideoSourceResolution>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.VideoSourceResolution";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoSourceResolution {
    return new VideoSourceResolution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoSourceResolution {
    return new VideoSourceResolution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoSourceResolution {
    return new VideoSourceResolution().fromJsonString(jsonString, options);
  }

  static equals(a: VideoSourceResolution | PlainMessage<VideoSourceResolution> | undefined, b: VideoSourceResolution | PlainMessage<VideoSourceResolution> | undefined): boolean {
    return proto3.util.equals(VideoSourceResolution, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoSourceInfo
 */
export class VideoSourceInfo extends Message<VideoSourceInfo> {
  /**
   * @generated from field: livekit.proto.VideoSourceType type = 1;
   */
  type = VideoSourceType.VIDEO_SOURCE_NATIVE;

  constructor(data?: PartialMessage<VideoSourceInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.VideoSourceInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(VideoSourceType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoSourceInfo {
    return new VideoSourceInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoSourceInfo {
    return new VideoSourceInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoSourceInfo {
    return new VideoSourceInfo().fromJsonString(jsonString, options);
  }

  static equals(a: VideoSourceInfo | PlainMessage<VideoSourceInfo> | undefined, b: VideoSourceInfo | PlainMessage<VideoSourceInfo> | undefined): boolean {
    return proto3.util.equals(VideoSourceInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.OwnedVideoSource
 */
export class OwnedVideoSource extends Message<OwnedVideoSource> {
  /**
   * @generated from field: livekit.proto.FfiOwnedHandle handle = 1;
   */
  handle?: FfiOwnedHandle;

  /**
   * @generated from field: livekit.proto.VideoSourceInfo info = 2;
   */
  info?: VideoSourceInfo;

  constructor(data?: PartialMessage<OwnedVideoSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.OwnedVideoSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: VideoSourceInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnedVideoSource {
    return new OwnedVideoSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnedVideoSource {
    return new OwnedVideoSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnedVideoSource {
    return new OwnedVideoSource().fromJsonString(jsonString, options);
  }

  static equals(a: OwnedVideoSource | PlainMessage<OwnedVideoSource> | undefined, b: OwnedVideoSource | PlainMessage<OwnedVideoSource> | undefined): boolean {
    return proto3.util.equals(OwnedVideoSource, a, b);
  }
}

